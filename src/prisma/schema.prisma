generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// Add these to your schema

model User {
  id            Int              @id @default(autoincrement())
  name          String
  email         String           @unique
  password      String
  shops         Shop[]           @relation("UserShops")
  managed_shop  Shop?            @relation("ManagedShop", references: [id], fields: [managedShopId])
  managedShopId Int?             @unique
  is_active     Boolean          @default(true)
  address       Address[]
  permissions   String[]  @default(["Customer"])
  otps          OTP[]
  orders        Order[]
  orderFiles    OrderFile[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  profile       Profile?
  @@index([email])
}


model Shop {
  id          Int      @id @default(autoincrement())
  owner       User     @relation("UserShops", fields: [ownerId], references: [id])
  ownerId     Int
  manager     User?    @relation("ManagedShop")
  name        String
  slug        String   @unique
  description String?  @db.Text
  coverImage  Json?
  logo        Json?
  isActive    Boolean  @default(true)
  address     Json?
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([ownerId])
}

model Order {
  id              Int      @id @default(autoincrement())
  trackingNumber  String   @unique
  userId          Int      // Add user relation
  user            User     @relation(fields: [userId], references: [id])
  amount          Float
  total           Float
  deliveryFee     Float
  discount        Float
  status          Json
  deliveryTime    String
  products        Json[]
  shippingAddress Json
  createdAt       DateTime @default(now())

  @@index([userId]) // Add index for faster lookups
}

model OrderFile {
  id             Int      @id @default(autoincrement())
  purchaseKey    String   @unique
  digitalFileId  Int
  orderId        Int?
  customerId     Int
  user           User     @relation(fields: [customerId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  file           Json?

  @@index([customerId]) // Add index for faster lookups
}

model OTP {
  id           String   @id @default(uuid())
  code         String
  phone_number String
  userId       Int?
  user         User?    @relation(fields: [userId], references: [id])
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  @@index([phone_number]) // Add index for faster phone lookups
  @@index([userId])       // Add index for faster user lookups
}
model Attribute {
  id                   Int              @id @default(autoincrement())
  name                 String
  shopId               Int              @map("shop_id")
  language            String           @default("en")
  translatedLanguages String[]         @map("translated_languages")
  slug                String           @unique
  type                Json?            // Storing type as JSON since it's a nested object
  values              AttributeValue[]
  createdAt           DateTime         @default(now()) @map("created_at")
  updatedAt           DateTime         @updatedAt @map("updated_at")

  @@map("attributes")
}

model AttributeValue {
  id                   Int       @id @default(autoincrement())
  value               String
  attributeId         Int       @map("attribute_id")
  slug                String    @unique
  meta                String?
  language            String    @default("en")
  translatedLanguages String[]  @map("translated_languages")
  attribute           Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  @@map("attribute_values")
}

model Author {
  id                    Int       @id @default(autoincrement())
  name                  String
  isApproved           Boolean    @default(false)
  image                Json?
  coverImage           Json?
  slug                 String     @unique
  language             String
  bio                  String?    @db.Text
  quote                String?    @db.Text
  born                 DateTime?
  death                DateTime?
  languages            String?
  socials              Json?
  productsCount        Int        @default(0)
  translatedLanguages  String[]
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
}


model Coupon {
  id                   Int       @id @default(autoincrement())
  code                 String    @unique
  language            String?
  description         String?    @db.Text
  image               Json?
  type                String
  amount              Float
  activeFrom          DateTime
  expireAt            DateTime
  isValid             Boolean    @default(true)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  translatedLanguages String[]
}


model OrderStatus {
  id        Int      @id @default(autoincrement())
  name      String
  serial    Int
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id           Int        @id @default(autoincrement())
  name         String
  slug         String     @unique
  description  String?    @db.Text
  sku          String?    
  image        Json?
  gallery      Json[]
  quantity     Int        @default(0)
  price        Decimal?   @db.Decimal(10,2)
  salePrice    Decimal?   @db.Decimal(10,2)
  unit         String?
  productType  String?
  maxPrice     Decimal?   @db.Decimal(10,2)
  minPrice     Decimal?   @db.Decimal(10,2)
  status       String     @default("draft")
  tags         Json[]
  variations   Json[]
  category     Category?  @relation(fields: [categoryId], references: [id])
  categoryId   Int?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([sku])  // This creates a unique constraint but allows null values
  @@index([categoryId])
  @@index([status])
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String
  slug      String     @unique
  image     Json?
  icon      String?
  children  Category[] @relation("SubCategories")
  parent    Category?  @relation("SubCategories", fields: [parentId], references: [id])
  parentId  Int?
  products  Product[]  // Added this line to complete the relation
  
  @@index([parentId])
}


model Address {
  id          Int      @id @default(autoincrement())
  title       String
  type        String
  default     Boolean  @default(false)
  address     Json
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Analytics {
  id                       Int      @id @default(autoincrement())
  totalRevenue            Decimal  @db.Decimal(10, 2)
  totalRefunds            Decimal  @db.Decimal(10, 2)
  totalShops              Int
  totalVendors            Int
  todaysRevenue           Decimal  @db.Decimal(10, 2)
  totalOrders             Int
  newCustomers            Int
  todayTotalOrderByStatus Json     // Storing as JSON object
  weeklyTotalOrderByStatus Json     // Storing as JSON object
  monthlyTotalOrderByStatus Json    // Storing as JSON object
  yearlyTotalOrderByStatus Json     // Storing as JSON object
  totalYearSaleByMonth    Json[]   // Array of month-wise sales
  monthlySales            MonthlySale[] // Added relation field
  updatedAt               DateTime @updatedAt
  createdAt               DateTime @default(now())

  @@map("analytics")
}

model MonthlySale {
  id          Int       @id @default(autoincrement())
  month       String
  total       Int
  year        Int
  analytics   Analytics @relation(fields: [analyticsId], references: [id])
  analyticsId Int

  @@unique([month, year])
  @@map("monthly_sales")
}

model Profile {
  id                Int       @id @default(autoincrement())
  bio               String?   @db.Text
  contact           String?
  avatarId          String?
  avatarThumbnail   String?
  avatarOriginal    String?
  notificationEmail String?
  notificationEnable Boolean  @default(false)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int       @unique @map("user_id")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("profiles")
}